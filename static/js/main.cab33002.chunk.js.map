{"version":3,"sources":["assets/haiku-japanese.jpg","firebase.js","removeFromArray.js","Components/Header.js","Components/Form.js","Components/Haiku.js","Components/RelatedWords.js","Components/Restart.js","App.js","randomizers.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","removeFromArray","item","array","i","length","splice","Header","className","onClick","this","props","createHaiku","showJournal","Component","Form","onSubmit","handleFormSubmit","action","htmlFor","placeholder","onChange","handleUserInput","type","id","name","pattern","autoComplete","value","inputTextValue","Haiku","firstLine","map","index","key","word","secondLine","thirdLine","currentLine","RelatedWords","tenRelatedWords","totalSyllables","wordChosen","moreWords","Restart","save","App","e","preventDefault","axios","url","state","userInput","method","responseType","then","response","totalSyllablesSoFar","getSyllablesPerLine","maxSyllablesAllowed","checkMaxSyllablesAllowed","data","toLowerCase","numSyllables","firstLineCopy","secondLineCopy","thirdLineCopy","currentLineCopy","push","setState","formVisible","messageToUser","getRelatedWords","catch","error","suggestions","areRelatedWordsLoading","filterResults","syllablesSoFar","randomizeWords","relatedWords","min","max","relatedWordsCopy","randomWords","randomIndex","Math","ceil","floor","random","undefined","results","regex","filteredResults","filter","match","allRelatedWords","line","numberOfSyllablesLine","forEach","target","autoCompleteSuggestions","input","chooseSuggestedWord","lineArrayCopy","totalSyllablesCopy","headerVisible","activeHaiku","handleTitleInput","titleInput","handleAuthorInput","authorInput","toggleTitleForm","showTitleForm","toggleJournal","saveHaiku","title","author","currentDate","Date","year","getFullYear","monthNumber","getMonth","dayOfMonth","getDate","date","haiku","database","ref","displayJournalLog","event","savedHaikus","console","log","parseInt","on","savedHaikusArray","savedHaikusRaw","val","currentSyllables","maxSyllables","showPreloader","setTimeout","suggestion","size","color","css","src","HaikuImage","alt","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cab33002.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/haiku-japanese.d2949f10.jpg\";","import firebase from 'firebase';\r\n// < !--The core Firebase JS SDK is always required and must be listed first-- >\r\n//     <script src=\"https://www.gstatic.com/firebasejs/7.10.0/firebase-app.js\"></script>\r\n\r\n//     <!--TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries -->\r\n\r\n// <script>\r\n    // Your web app's Firebase configuration\r\n    const firebaseConfig = {\r\n        apiKey: \"AIzaSyBE8auObjMYjHy4DjuMxCbCJBZNSE8MKl8\",\r\n    authDomain: \"haikyou-project-6.firebaseapp.com\",\r\n    databaseURL: \"https://haikyou-project-6.firebaseio.com\",\r\n    projectId: \"haikyou-project-6\",\r\n    storageBucket: \"haikyou-project-6.appspot.com\",\r\n    messagingSenderId: \"85831219483\",\r\n    appId: \"1:85831219483:web:7d0848f2dc29dea534bbbe\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n// </script>\r\n\r\nexport default firebase;","export default function removeFromArray(item, array) {\r\n    for (let i = 0; i < array.length; i++) {\r\n        if (array[i] === item) {\r\n            array.splice(i, 1);\r\n        }\r\n    }\r\n};\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass Header extends Component{\r\n    render(){\r\n        return(\r\n            <header>\r\n                <div className=\"wrapper\">\r\n                    <h1>HaikYou</h1>\r\n                    <p>A haiku is a Japanese poem of seventeen syllables, in three lines of five, seven, and five, traditionally evoking images of the natural world. Create your own!</p>\r\n\r\n                    <div className=\"homeButtonDiv\">\r\n                        <button className=\"homeButton\" onClick={this.props.createHaiku}>\r\n                            Write\r\n                        </button>\r\n\r\n                        <button className=\"homeButton\" onClick={this.props.showJournal}>\r\n                            Journal\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.props.handleFormSubmit} action=\"submit\" className=\"form wrapper\">\r\n                <label className=\"visuallyHidden\" htmlFor=\"userInput\">Type a word:</label>\r\n                <input placeholder=\"Type a word here\" onChange={this.props.handleUserInput} type=\"text\" id=\"userInput\" name=\"userInput\" pattern=\"^[a-zA-Z]*$\" autoComplete=\"off\" value={this.props.inputTextValue} />\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\n\r\nclass Haiku extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"printedHaiku wrapper\">\r\n\r\n                {\r\n                    this.props.firstLine.length > 0 ?\r\n                        <p className=\"line firstLine\">\r\n                            {\r\n                                this.props.firstLine.map((item, index) => {\r\n                                    return <span key={item.word + index}>{item.word} </span>\r\n                                })\r\n                            }\r\n                        </p>\r\n                        : null\r\n                }\r\n\r\n                {\r\n\r\n                    this.props.secondLine.length > 0 ?\r\n                        <p className=\"line secondLine\">\r\n                            {\r\n                                this.props.secondLine.map((item, index) => {\r\n                                    return <span key={item.word + index}>{item.word} </span>\r\n                                })\r\n                            }\r\n                        </p>\r\n                        : null\r\n                }\r\n\r\n                {\r\n                    this.props.thirdLine.length > 0 ?\r\n                        <p className=\"line thirdLine\">\r\n                            {\r\n                                this.props.thirdLine.map((item, index) => {\r\n                                    return <span key={item.word + index}>{item.word} </span>\r\n                                })\r\n                            }\r\n                        </p>\r\n                        : null\r\n                }\r\n\r\n                {\r\n                    this.props.currentLine.length > 0 ?\r\n                        <p className=\"line currentLine underline\">\r\n                            {\r\n                                this.props.currentLine.map((item, index) => {\r\n                                    return <span key={item.word + index}>{item.word} </span>\r\n                                })\r\n                            }\r\n                        </p>\r\n                        : null\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Haiku;","import React from 'react';\r\n\r\nconst RelatedWords = (props) => {\r\n  return (\r\n      <div className=\"wrapper\">\r\n          <ul className=\"relatedWords\">\r\n            {\r\n              props.tenRelatedWords.length > 0 && props.totalSyllables < 17 ?\r\n                props.tenRelatedWords.map((item, index) => {\r\n                  return (\r\n                    <li key={item.word + index}>\r\n                        <button className=\"chosenWord\" onClick={() => props.wordChosen(item)}>{item.word}</button>\r\n                    </li>\r\n                  )\r\n                }) \r\n              : null\r\n            }\r\n          </ul>\r\n                \r\n            {\r\n              props.tenRelatedWords.length > 0 && props.totalSyllables < 17 ?\r\n                <div className=\"moreWordsButton\">\r\n                    <button onClick={props.moreWords}>More words</button>\r\n                </div>\r\n              : null\r\n            }\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default RelatedWords;\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass Restart extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"restart wrapper\">\r\n                <h2>Your haiku is complete!</h2>\r\n                <button onClick={this.props.createHaiku}>Write</button>\r\n                <button onClick={this.props.save}>Save</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Restart;","import React, { Component, Fragment } from 'react';\r\nimport firebase from './firebase';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport { getRandomIntInRangeExclusive } from './randomizers';\r\nimport removeFromArray from './removeFromArray';\r\nimport Header from './Components/Header';\r\nimport Form from './Components/Form';\r\nimport Haiku from './Components/Haiku';\r\nimport RelatedWords from './Components/RelatedWords';\r\nimport Restart from './Components/Restart';\r\nimport HaikuImage from './assets/haiku-japanese.jpg';\r\nimport SyncLoader from \"react-spinners/SyncLoader\";\r\n\r\nconst override = `\r\n  display: block;\r\n  margin: 0 auto;\r\n`;\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    // 1\r\n    this.state = {\r\n      userInput: '', //2,\r\n      firstLine: [], //3\r\n      secondLine: [],\r\n      thirdLine: [],\r\n      allRelatedWords: [],\r\n      tenRelatedWords: [],\r\n      currentLine: [],\r\n      totalSyllables: 0,\r\n      formVisible: false,\r\n      headerVisible: true,\r\n      suggestions: [],\r\n      inputTextValue: '',\r\n      messageToUser: 'Letter characters only, please.',\r\n      areRelatedWordsLoading: false,\r\n      showTitleForm: false,\r\n      titleInput: '',\r\n      authorInput: '',\r\n      savedHaikus: [],\r\n      showJournal: false,\r\n      activeHaiku: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    \r\n    dbRef.on('value', (response) => {\r\n      let savedHaikusArray = [];\r\n      \r\n      const savedHaikusRaw = response.val();\r\n      \r\n      for (let haiku in savedHaikusRaw) {\r\n        savedHaikusArray.push(savedHaikusRaw[haiku]);\r\n      }\r\n\r\n      this.setState({\r\n        savedHaikus: savedHaikusArray\r\n      });\r\n    });\r\n  }\r\n\r\n  handleFormSubmit = (e) => { //4\r\n    e.preventDefault();\r\n\r\n    axios({ //5\r\n      url: `https://api.datamuse.com/words?sp=${this.state.userInput}&md=s`,\r\n      method: 'GET',\r\n      responseType: 'json',\r\n    }).then((response) => {\r\n      // Recall: response = data received from AXIOS call\r\n      const totalSyllablesSoFar = this.getSyllablesPerLine(this.state.currentLine);\r\n      const maxSyllablesAllowed = this.checkMaxSyllablesAllowed(totalSyllablesSoFar);\r\n\r\n      if (response.data[0].word === this.state.userInput.toLowerCase() && response.data[0].numSyllables <= maxSyllablesAllowed) {\r\n\r\n        let firstLineCopy = [...this.state.firstLine];\r\n        let secondLineCopy = [...this.state.secondLine];\r\n        let thirdLineCopy = [...this.state.thirdLine];\r\n        let currentLineCopy = [...this.state.currentLine]; //6\r\n\r\n        if (response.data[0].numSyllables === maxSyllablesAllowed) {\r\n          if (this.state.totalSyllables <= 5) {\r\n            currentLineCopy.push(response.data[0]);\r\n            firstLineCopy = [...currentLineCopy];\r\n            currentLineCopy = [];\r\n          } else if (this.state.totalSyllables <= 12) {\r\n            currentLineCopy.push(response.data[0]);\r\n            secondLineCopy = [...currentLineCopy];\r\n            currentLineCopy = [];\r\n          } else {\r\n            currentLineCopy.push(response.data[0]);\r\n            thirdLineCopy = [...currentLineCopy];\r\n            currentLineCopy = [];\r\n          }\r\n        } else {\r\n          currentLineCopy.push(\r\n            // Recall: .push() adds items into our currentLineCopy array\r\n            {//7\r\n              word: this.state.userInput,\r\n              numSyllables: response.data[0].numSyllables\r\n            }\r\n          );\r\n        }\r\n  \r\n  \r\n        this.setState({ //8\r\n          firstLine: firstLineCopy,\r\n          secondLine: secondLineCopy,\r\n          thirdLine: thirdLineCopy,\r\n          currentLine: currentLineCopy,\r\n          totalSyllables: this.state.totalSyllables + response.data[0].numSyllables,\r\n          formVisible: false,\r\n          messageToUser: 'Choose the next word.'\r\n        },\r\n          //9\r\n          () => {\r\n            this.getRelatedWords(this.state.userInput);\r\n          }\r\n        );\r\n      } else if (response.data[0].word !== this.state.userInput.toLowerCase()) {\r\n        this.setState({\r\n          userInput: '',\r\n          inputTextValue: '',\r\n          messageToUser: 'I think you may have misspelled that. Please try again.'\r\n        });\r\n      } else if (response.data[0].numSyllables > maxSyllablesAllowed) {\r\n        this.setState({\r\n          userInput: '',\r\n          inputTextValue: '',\r\n          messageToUser: 'That word is too many syllables. Please try another.'\r\n        });\r\n      }\r\n    }).catch((error) => {\r\n      this.setState({\r\n        userInput: '',\r\n        inputTextValue: '',\r\n        messageToUser: \"That word doesn't seem to exist. Please try another.\",\r\n        suggestions: []\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  //10\r\n  getRelatedWords = (word) => {\r\n    this.setState({areRelatedWordsLoading: true}, () => {\r\n      axios({\r\n        url: `https://api.datamuse.com/words?rel_bga=${word}&md=s`,\r\n        method: 'GET',\r\n        responseType: 'json',\r\n      }).then((response) => {\r\n        //11\r\n\r\n        //12\r\n        if (response.data.length === 0) {\r\n          this.setState({\r\n            formVisible: true,\r\n            userInput: '',\r\n            tenRelatedWords: [],\r\n            areRelatedWordsLoading: false,\r\n            messageToUser: \"Couldn't find any words related to that. Please enter the next one.\",\r\n            inputTextValue: ''\r\n          });\r\n        } else {\r\n          this.filterResults(response.data);\r\n          this.setState({\r\n            areRelatedWordsLoading: false,\r\n          })\r\n        }\r\n      });\r\n    })\r\n  }\r\n\r\n  checkMaxSyllablesAllowed = (syllablesSoFar) => {\r\n    let maxSyllablesAllowed;\r\n\r\n    if (this.state.totalSyllables < 5 || this.state.totalSyllables >= 12) {\r\n      maxSyllablesAllowed = 5 - syllablesSoFar;\r\n    } else {\r\n      maxSyllablesAllowed = 7 - syllablesSoFar;\r\n    }\r\n    return maxSyllablesAllowed;\r\n  }\r\n\r\n  randomizeWords = (relatedWords) => {\r\n    const relatedWordsCopy = [...relatedWords];\r\n\r\n    const randomWords = [];\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n      // Find random index\r\n      const randomIndex = getRandomIntInRangeExclusive(0, relatedWordsCopy.length);\r\n\r\n      // Push random index of relatedWordsCopy array into randomWords array\r\n      if (relatedWordsCopy[randomIndex] !== undefined) {\r\n        randomWords.push(relatedWordsCopy[randomIndex]);\r\n      }\r\n\r\n      // Remove random index from relatedWordsCopy array to prevent duplicates in randomWords array\r\n      removeFromArray(relatedWordsCopy[randomIndex], relatedWordsCopy);\r\n\r\n    }\r\n\r\n    return randomWords\r\n  }\r\n\r\n  filterResults = (results) => {\r\n    //13\r\n\r\n    const totalSyllablesSoFar = this.getSyllablesPerLine(this.state.currentLine);\r\n\r\n    //14\r\n    const maxSyllablesAllowed = this.checkMaxSyllablesAllowed(totalSyllablesSoFar);\r\n\r\n    //15\r\n\r\n    const regex = /[a-z]/g;\r\n\r\n    //16\r\n    const filteredResults = results.filter((item) => {\r\n      if (item.numSyllables <= maxSyllablesAllowed && item.word.match(regex)) {\r\n        //17\r\n        return item;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n\r\n    // console.log(filteredResults)\r\n\r\n    let randomWords;\r\n    let formVisible = false;\r\n    let messageToUser = 'Choose the next word.';\r\n\r\n    if (filteredResults.length > 0) {\r\n      randomWords = this.randomizeWords(filteredResults);\r\n    } else {\r\n      randomWords = [];\r\n      formVisible = true;\r\n      messageToUser = \"Couldn't find any words related to that. Please enter the next one.\";\r\n    }\r\n\r\n    this.setState({\r\n      allRelatedWords: filteredResults,\r\n      tenRelatedWords: randomWords,\r\n      userInput: '',\r\n      inputTextValue: '',\r\n      formVisible: formVisible,\r\n      messageToUser: messageToUser\r\n    })\r\n  }\r\n\r\n  // Provide a line to check and get the total number of syllables within that line\r\n  getSyllablesPerLine = (line) => {\r\n    // Line will be an array that is received from state\r\n\r\n    // initialize a sum variable to 0\r\n    let numberOfSyllablesLine = 0;\r\n    // Loop through each item in the line array provided\r\n    line.forEach((item) => {\r\n      // Add the number of syllables in this word to the sum variable\r\n      numberOfSyllablesLine += item.numSyllables;\r\n    });\r\n    // Return the total sum of syllables\r\n    return numberOfSyllablesLine;\r\n  }\r\n\r\n  handleUserInput = (e) => {\r\n    this.setState({\r\n      userInput: e.target.value,\r\n      inputTextValue: e.target.value\r\n    });\r\n\r\n    if (e.target.value !== '') {\r\n      this.autoCompleteSuggestions(e.target.value);\r\n    } else {\r\n      this.setState({\r\n        suggestions: []\r\n      });\r\n    }\r\n  }\r\n\r\n  autoCompleteSuggestions = (input) => {\r\n    axios({\r\n      url: `https://api.datamuse.com/sug?s=${input}`,\r\n      method: 'GET',\r\n      responseType: 'json'\r\n    }).then((response)=> {\r\n      this.setState({\r\n        suggestions: response.data\r\n      });\r\n    })\r\n  }\r\n\r\n  chooseSuggestedWord = (word) => {\r\n    this.setState({\r\n      userInput: word,\r\n      inputTextValue: word,\r\n      suggestions: []\r\n    });\r\n  }\r\n\r\n  // Word onClick function\r\n  wordChosen = (item) => {\r\n\r\n    let firstLineCopy = [...this.state.firstLine];\r\n    let secondLineCopy = [...this.state.secondLine];\r\n    let thirdLineCopy = [...this.state.thirdLine];\r\n\r\n    let lineArrayCopy = [...this.state.currentLine];\r\n    lineArrayCopy.push(item);\r\n\r\n    let totalSyllablesCopy = this.state.totalSyllables + item.numSyllables;\r\n\r\n    let messageToUser = 'Choose the next word.';\r\n\r\n    //if the current line is line one, and syllables so far is five, then move to line two and update the current line to two\r\n    if (totalSyllablesCopy === 5) {\r\n      //when we've reached our cap, push the array to first line, reset current line to an empty array\r\n      firstLineCopy = [...lineArrayCopy];\r\n      lineArrayCopy = [];\r\n    } else if (totalSyllablesCopy === 12) {\r\n      secondLineCopy = [...lineArrayCopy];\r\n      lineArrayCopy = [];\r\n    } else if (totalSyllablesCopy === 17) {\r\n      thirdLineCopy = [...lineArrayCopy];\r\n      lineArrayCopy = [];\r\n      messageToUser = '';\r\n    }\r\n\r\n    this.setState({\r\n      currentLine: lineArrayCopy,\r\n      firstLine: firstLineCopy,\r\n      secondLine: secondLineCopy,\r\n      thirdLine: thirdLineCopy,\r\n      totalSyllables: totalSyllablesCopy,\r\n      messageToUser: messageToUser\r\n    }, () => {\r\n      if (this.state.totalSyllables < 17) {\r\n        this.getRelatedWords(item.word)\r\n      }\r\n    })\r\n  }\r\n\r\n  // This is the event handler for the Journal button on our home screen, as well as our \"restart\" button\r\n  createHaiku = () => {\r\n    this.setState({\r\n      userInput: '', \r\n      firstLine: [],\r\n      secondLine: [],\r\n      thirdLine: [],\r\n      allRelatedWords: [],\r\n      tenRelatedWords: [],\r\n      currentLine: [],\r\n      totalSyllables: 0,\r\n      suggestions: [],\r\n      inputTextValue: '',\r\n      formVisible: true,\r\n      headerVisible: false,\r\n      showJournal: false,\r\n      activeHaiku: false\r\n    })\r\n  }\r\n\r\n  // This button will get user more words related to their word of choice\r\n  moreWords = () => {\r\n    this.setState({\r\n      tenRelatedWords: this.randomizeWords(this.state.allRelatedWords)\r\n    })\r\n  }\r\n\r\n  handleTitleInput = (e) => {\r\n    this.setState({\r\n      titleInput: e.target.value\r\n    });\r\n  }\r\n\r\n  handleAuthorInput = (e) => {\r\n    this.setState({\r\n      authorInput: e.target.value\r\n    });\r\n  }\r\n\r\n  toggleTitleForm = () => {\r\n    this.setState({\r\n      showTitleForm: !this.state.showTitleForm\r\n    });\r\n  }\r\n\r\n  toggleJournal = () => {\r\n    this.setState({\r\n      showJournal: !this.state.showJournal,\r\n      headerVisible: false\r\n    })\r\n  }\r\n\r\n  saveHaiku = (e) => {\r\n    e.preventDefault();\r\n\r\n    let title, author;\r\n    if (this.state.titleInput === '') {\r\n      title = 'Untitled';\r\n    } else {\r\n      title = this.state.titleInput;\r\n    }\r\n\r\n    if (this.state.authorInput === '') {\r\n      author = 'Anonymous';\r\n    } else {\r\n      author = this.state.authorInput;\r\n    }\r\n\r\n    const currentDate = new Date();\r\n    const year = currentDate.getFullYear();\r\n    const monthNumber = currentDate.getMonth();\r\n    const dayOfMonth = currentDate.getDate();\r\n\r\n    const date = `${monthNumber + 1}-${dayOfMonth}-${year}`;\r\n\r\n    const haiku = {\r\n      title: title,\r\n      author: author,\r\n      firstLine: this.state.firstLine,\r\n      secondLine: this.state.secondLine,\r\n      thirdLine: this.state.thirdLine,\r\n      date: date\r\n    };\r\n\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.push(haiku);\r\n\r\n    this.toggleTitleForm();\r\n    this.toggleJournal();\r\n  }\r\n\r\n  displayJournalLog = (event) => {\r\n    const haiku = this.state.savedHaikus[event.target.value]\r\n    console.log(haiku)\r\n\r\n    this.setState({\r\n      activeHaiku: parseInt(event.target.value),\r\n      firstLine: haiku.firstLine,\r\n      secondLine: haiku.secondLine,\r\n      thirdLine: haiku.thirdLine,\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    const currentSyllables = this.getSyllablesPerLine(this.state.currentLine);\r\n    let maxSyllables = 5;\r\n    if (this.state.firstLine.length > 0 && this.state.secondLine.length === 0) {\r\n      maxSyllables = 7;\r\n    }\r\n\r\n    let showPreloader = false;\r\n    if (!this.state.areRelatedWordsLoading) {\r\n      setTimeout(() => {\r\n        showPreloader = true;\r\n      }, 300);\r\n    }\r\n\r\n    return (\r\n\r\n      <div className=\"App\">\r\n\r\n        <div className=\"rightHalf\">\r\n          {\r\n            this.state.headerVisible ?\r\n            <Header\r\n              createHaiku = {this.createHaiku}\r\n              showJournal = {this.toggleJournal}\r\n            />\r\n            :\r\n            <div className=\"wrapper informationForUser\">\r\n              {\r\n                this.state.totalSyllables < 17 && !this.state.showJournal ? \r\n                <div className=\"syllableCounter\">\r\n                  <h3> Syllables {currentSyllables} / {maxSyllables}</h3>\r\n                </div>\r\n                : null\r\n              }\r\n              {\r\n                !this.state.showJournal ? \r\n                  <div className=\"messageToUser\">\r\n                    <p>{this.state.messageToUser}</p>\r\n                  </div>\r\n                : null\r\n              }\r\n            </div>\r\n          }\r\n\r\n          {\r\n            this.state.formVisible ?\r\n              <Form\r\n                handleFormSubmit={this.handleFormSubmit}\r\n                handleUserInput={this.handleUserInput}\r\n                inputTextValue={this.state.inputTextValue}\r\n              />\r\n            : null\r\n          }\r\n        \r\n          {\r\n            this.state.formVisible && this.state.suggestions.length > 0 ?\r\n              <div className=\"autoCompleteSuggestions\">\r\n                <ul>\r\n                  {\r\n                    this.state.suggestions.map((suggestion, index)=> {\r\n                      return (\r\n                        <li key={suggestion + index}>\r\n                          <button onClick={ ()=> this.chooseSuggestedWord(suggestion.word) }>{suggestion.word}</button>\r\n                        </li>\r\n                      );\r\n                    })\r\n                  }\r\n                </ul>\r\n              </div>\r\n            : null\r\n          }\r\n\r\n        {\r\n          this.state.areRelatedWordsLoading && showPreloader ?\r\n            <SyncLoader\r\n              size={15}\r\n              color={\"#fff\"}\r\n              css={override}\r\n            />\r\n          :\r\n          \r\n          this.state.totalSyllables < 17 ?\r\n            <RelatedWords\r\n              tenRelatedWords={this.state.tenRelatedWords}\r\n              totalSyllables={this.state.totalSyllables}\r\n              wordChosen={this.wordChosen}\r\n              moreWords={this.moreWords}\r\n            />\r\n          : null\r\n          \r\n        }\r\n\r\n        {\r\n          this.state.totalSyllables === 17 && !this.state.showTitleForm && !this.state.showJournal ?\r\n            <Restart\r\n              createHaiku={this.createHaiku}\r\n              save={this.toggleTitleForm}\r\n            />\r\n            : null    \r\n        }\r\n        {\r\n          this.state.showTitleForm ?\r\n          <form action=\"submit\" onSubmit={this.saveHaiku} className=\"titleForm wrapper\">\r\n            <label htmlFor=\"titleInput\" className=\"visuallyHidden\">Title: </label>\r\n            <input onChange={this.handleTitleInput} type=\"text\" id=\"titleInput\" name=\"titleInput\" placeholder=\"Title\"/>\r\n            <label htmlFor=\"authorInput\" className=\"visuallyHidden\">Author: </label>\r\n            <input onChange={this.handleAuthorInput} type=\"text\" id=\"authorInput\" name=\"authorInput\" placeholder=\"Author\" />\r\n            <button type=\"submit\">Save to Journal</button>\r\n          </form>\r\n          : null\r\n        }\r\n        {\r\n          this.state.showJournal ?\r\n            <div className=\"wrapper journalParent\">\r\n              <h2>Journal</h2>\r\n              <ul className=\"journal\">\r\n                {\r\n                  this.state.savedHaikus.map((haiku, index) => {\r\n                    return (\r\n                      <li key={haiku.title + Math.random()}>\r\n                        <button \r\n                          onClick={this.displayJournalLog}\r\n                          className={ this.state.activeHaiku === index ? 'activeHaiku' : '' }\r\n                          value={index}\r\n                        >\r\n                          {haiku.title} by {haiku.author} - {haiku.date}\r\n                        </button>\r\n                      </li>\r\n                    )\r\n                  })\r\n                }\r\n              </ul>\r\n              <button className=\"journalWrite\" onClick={this.createHaiku}>Write</button>\r\n            </div>\r\n          : null\r\n        }\r\n      </div>\r\n\r\n      <div className=\"leftHalf\">\r\n        <Haiku\r\n          firstLine={this.state.firstLine}\r\n          secondLine={this.state.secondLine}\r\n          thirdLine={this.state.thirdLine}\r\n          currentLine={this.state.currentLine}\r\n        />\r\n\r\n        <div className=\"japanese\">\r\n          <img src={HaikuImage} alt=\"\"/>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","export default function getRandomIntInRange(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function getRandomIntInRangeExclusive(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\nexport function getRandomFloatInRange(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\nexport function probability(n) {\r\n    return n > 0 && Math.random() <= n;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}