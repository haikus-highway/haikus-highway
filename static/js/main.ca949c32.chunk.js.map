{"version":3,"sources":["removeFromArray.js","Components/Header.js","Components/Form.js","Components/Haiku.js","Components/RelatedWords.js","App.js","randomizers.js","serviceWorker.js","index.js"],"names":["removeFromArray","item","array","i","length","splice","Header","className","onClick","this","props","createHaiku","Component","Form","onSubmit","handleFormSubmit","action","htmlFor","placeholder","onChange","handleUserInput","type","id","name","pattern","autoComplete","value","inputTextValue","Haiku","firstLine","map","index","key","word","secondLine","thirdLine","currentLine","RelatedWords","tenRelatedWords","totalSyllables","wordChosen","moreWords","App","e","preventDefault","axios","url","state","userInput","method","responseType","then","response","totalSyllablesSoFar","getSyllablesPerLine","maxSyllablesAllowed","checkMaxSyllablesAllowed","data","toLowerCase","numSyllables","firstLineCopy","secondLineCopy","thirdLineCopy","currentLineCopy","push","setState","formVisible","getRelatedWords","alert","catch","error","filterResults","syllablesSoFar","randomizeWords","relatedWords","min","max","relatedWordsCopy","randomWords","randomIndex","Math","ceil","floor","random","undefined","results","regex","filteredResults","filter","match","allRelatedWords","line","numberOfSyllablesLine","forEach","target","autoCompleteSuggestions","suggestions","input","chooseSuggestedWord","lineArrayCopy","totalSyllablesCopy","headerVisible","console","log","suggestion","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ca949c32.chunk.js","sourcesContent":["export default function removeFromArray(item, array) {\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] === item) {\n            array.splice(i, 1);\n        }\n    }\n};\n\n","import React, { Component } from 'react';\n\nclass Header extends Component{\n    render(){\n        return(\n            <header>\n                <div className=\"wrapper\">\n                    <h1>HaikYou</h1>\n                    <p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Quo ex ut doloremque iste excepturi sit officiis odit quisquam quasi suscipit neque soluta, esse commodi nesciunt, ipsa nemo labore illum veniam.</p>\n\n                    <div className=\"homeButtonDiv\">\n                        <button className=\"homeButton\" onClick={this.props.createHaiku}>\n                            Journal\n                  </button>\n\n                        <button className=\"homeButton\">\n                            Haiku Log\n                  </button>\n                    </div>\n                </div>\n            </header>\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Form extends Component {\n    render() {\n        return (\n            <form onSubmit={this.props.handleFormSubmit} action=\"submit\" className=\"form wrapper\">\n                <label className=\"visuallyHidden\" htmlFor=\"userInput\">Type a word:</label>\n                <input placeholder=\"Type a word here\" onChange={this.props.handleUserInput} type=\"text\" id=\"userInput\" name=\"userInput\" pattern=\"^[a-zA-Z]*$\" autoComplete=\"off\" value={this.props.inputTextValue} />\n                <button type=\"submit\">Submit</button>\n            </form>\n        )\n    }\n}\n\nexport default Form;","import React, { Component } from 'react';\n\nclass Haiku extends Component {\n    render() {\n        return (\n            <div className=\"printedHaiku wrapper\">\n\n                {\n                    this.props.firstLine.length > 0 ?\n                        <p className=\"line firstLine\">\n                            {\n                                this.props.firstLine.map((item, index) => {\n                                    return <span key={item.word + index}>{item.word} </span>\n                                })\n                            }\n                        </p>\n                        : null\n                }\n\n                {\n\n                    this.props.secondLine.length > 0 ?\n                        <p className=\"line secondLine\">\n                            {\n                                this.props.secondLine.map((item, index) => {\n                                    return <span key={item.word + index}>{item.word} </span>\n                                })\n                            }\n                        </p>\n                        : null\n                }\n\n                {\n                    this.props.thirdLine.length > 0 ?\n                        <p className=\"line thirdLine\">\n                            {\n                                this.props.thirdLine.map((item, index) => {\n                                    return <span key={item.word + index}>{item.word} </span>\n                                })\n                            }\n                        </p>\n                        : null\n                }\n\n                {\n                    this.props.currentLine.length > 0 ?\n                        <p className=\"line currentLine underline\">\n                            {\n                                this.props.currentLine.map((item, index) => {\n                                    return <span key={item.word + index}>{item.word} </span>\n                                })\n                            }\n                        </p>\n                        : null\n                }\n\n            </div>\n        )\n    }\n}\n\nexport default Haiku;","import React, { Component } from 'react';\n\nclass RelatedWords extends Component {\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <ul className=\"relatedWords\">\n                    {\n                        this.props.tenRelatedWords.length > 0 && this.props.totalSyllables < 17 ?\n                            this.props.tenRelatedWords.map((item, index) => {\n                                return (\n                                    <div key={item.word + index}>\n                                        <li>\n                                            <button className=\"chosenWord\" onClick={() => this.props.wordChosen(item)}>{item.word}</button>\n                                        </li>\n                                    </div>\n                                )\n                            }) :\n                            null\n                    }\n\n                </ul>\n\n                {\n                    this.props.tenRelatedWords.length > 0 && this.props.totalSyllables < 17 ?\n                        <div className=\"moreWordsButton\">\n                            <button onClick={this.props.moreWords}>More words</button>\n                        </div>\n                        : null\n                }\n            </div>\n            \n        )\n    }\n}\n\nexport default RelatedWords;\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport { getRandomIntInRangeExclusive } from './randomizers';\nimport removeFromArray from './removeFromArray';\nimport Header from './Components/Header';\nimport Form from './Components/Form';\nimport Haiku from './Components/Haiku';\nimport RelatedWords from './Components/RelatedWords';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    // 1\n    this.state = {\n      userInput: '', //2,\n      firstLine: [], //3\n      secondLine: [],\n      thirdLine: [],\n      allRelatedWords: [],\n      tenRelatedWords: [],\n      currentLine: [],\n      totalSyllables: 0,\n      formVisible: false,\n      headerVisible: true,\n      suggestions: [],\n      inputTextValue: ''\n    };\n  }\n\n  handleFormSubmit = (e) => { //4\n    e.preventDefault();\n\n    axios({ //5\n      url: `https://api.datamuse.com/words?sp=${this.state.userInput}&md=s`,\n      method: 'GET',\n      responseType: 'json',\n    }).then((response) => {\n      // Recall: response = data received from AXIOS call\n      const totalSyllablesSoFar = this.getSyllablesPerLine(this.state.currentLine);\n      const maxSyllablesAllowed = this.checkMaxSyllablesAllowed(totalSyllablesSoFar);\n\n      if (response.data[0].word === this.state.userInput.toLowerCase() && response.data[0].numSyllables <= maxSyllablesAllowed) {\n\n        let firstLineCopy = [...this.state.firstLine];\n        let secondLineCopy = [...this.state.secondLine];\n        let thirdLineCopy = [...this.state.thirdLine];\n        let currentLineCopy = [...this.state.currentLine]; //6\n\n        if (response.data[0].numSyllables === maxSyllablesAllowed) {\n          if (this.state.totalSyllables <= 5) {\n            currentLineCopy.push(response.data[0]);\n            firstLineCopy = [...currentLineCopy];\n            currentLineCopy = [];\n          } else if (this.state.totalSyllables <= 12) {\n            currentLineCopy.push(response.data[0]);\n            secondLineCopy = [...currentLineCopy];\n            currentLineCopy = [];\n          } else {\n            currentLineCopy.push(response.data[0]);\n            thirdLineCopy = [...currentLineCopy];\n            currentLineCopy = [];\n          }\n        } else {\n          currentLineCopy.push(\n            // Recall: .push() adds items into our currentLineCopy array\n            {//7\n              word: this.state.userInput,\n              numSyllables: response.data[0].numSyllables\n            }\n          );\n        }\n  \n  \n        this.setState({ //8\n          firstLine: firstLineCopy,\n          secondLine: secondLineCopy,\n          thirdLine: thirdLineCopy,\n          currentLine: currentLineCopy,\n          totalSyllables: this.state.totalSyllables + response.data[0].numSyllables,\n          formVisible: false,\n        },\n          //9\n          () => {\n            this.getRelatedWords(this.state.userInput);\n          }\n        );\n      } else {\n        alert('Either you misspelled or entered too many syllables');\n        this.setState({\n          userInput: ''\n        });\n      }\n    }).catch((error) => {\n      alert(\"This word doesn't exist\");\n      this.setState({\n        userInput: ''\n      });\n\n    });\n  }\n\n  //10\n  getRelatedWords = (word) => {\n    axios({\n      url: `https://api.datamuse.com/words?rel_bga=${word}&md=s`,\n      method: 'GET',\n      responseType: 'json',\n    }).then((response) => {\n      //11\n\n      //12\n      if (response.data.length === 0) {\n        this.setState({\n          formVisible: true,\n          userInput: '',\n          tenRelatedWords: []\n        });\n\n        alert(\"Couldn't find any related words - please enter another!\")\n      } else {\n        this.filterResults(response.data);\n      }\n    });\n  }\n\n  checkMaxSyllablesAllowed = (syllablesSoFar) => {\n    let maxSyllablesAllowed;\n\n    if (this.state.totalSyllables < 5 || this.state.totalSyllables >= 12) {\n      maxSyllablesAllowed = 5 - syllablesSoFar;\n    } else {\n      maxSyllablesAllowed = 7 - syllablesSoFar;\n    }\n    return maxSyllablesAllowed;\n  }\n\n  randomizeWords = (relatedWords) => {\n    const relatedWordsCopy = [...relatedWords];\n\n    const randomWords = [];\n\n    for (let i = 0; i < 10; i++) {\n      // Find random index\n      const randomIndex = getRandomIntInRangeExclusive(0, relatedWordsCopy.length);\n\n      // Push random index of relatedWordsCopy array into randomWords array\n      if (relatedWordsCopy[randomIndex] !== undefined) {\n        randomWords.push(relatedWordsCopy[randomIndex]);\n      }\n\n      // Remove random index from relatedWordsCopy array to prevent duplicates in randomWords array\n      removeFromArray(relatedWordsCopy[randomIndex], relatedWordsCopy);\n\n    }\n\n    return randomWords\n  }\n\n  filterResults = (results) => {\n    //13\n\n    const totalSyllablesSoFar = this.getSyllablesPerLine(this.state.currentLine);\n\n    //14\n    const maxSyllablesAllowed = this.checkMaxSyllablesAllowed(totalSyllablesSoFar);\n\n    //15\n\n    const regex = /[a-z]/g;\n\n    //16\n    const filteredResults = results.filter((item) => {\n      if (item.numSyllables <= maxSyllablesAllowed && item.word.match(regex)) {\n        //17\n        return item;\n      } else {\n        return false;\n      }\n    });\n\n    // console.log(filteredResults)\n\n    let randomWords;\n    let formVisible = false;\n\n    if (filteredResults.length > 0) {\n      randomWords = this.randomizeWords(filteredResults);\n    } else {\n      randomWords = [];\n      formVisible = true;\n    }\n\n    this.setState({\n      allRelatedWords: filteredResults,\n      tenRelatedWords: randomWords,\n      userInput: '',\n      inputTextValue: '',\n      formVisible: formVisible\n    })\n  }\n\n  // Provide a line to check and get the total number of syllables within that line\n  getSyllablesPerLine = (line) => {\n    // Line will be an array that is received from state\n\n    // initialize a sum variable to 0\n    let numberOfSyllablesLine = 0;\n    // Loop through each item in the line array provided\n    line.forEach((item) => {\n      // Add the number of syllables in this word to the sum variable\n      numberOfSyllablesLine += item.numSyllables;\n    });\n    // Return the total sum of syllables\n    return numberOfSyllablesLine;\n  }\n\n  handleUserInput = (e) => {\n    this.setState({\n      userInput: e.target.value,\n      inputTextValue: e.target.value\n    });\n\n    if (e.target.value !== '') {\n      this.autoCompleteSuggestions(e.target.value);\n    } else {\n      this.setState({\n        suggestions: []\n      });\n    }\n  }\n\n  autoCompleteSuggestions = (input) => {\n    axios({\n      url: `https://api.datamuse.com/sug?s=${input}`,\n      method: 'GET',\n      responseType: 'json'\n    }).then((response)=> {\n      this.setState({\n        suggestions: response.data\n      });\n    })\n  }\n\n  chooseSuggestedWord = (word) => {\n    this.setState({\n      userInput: word,\n      inputTextValue: word,\n      suggestions: []\n    });\n  }\n\n  // Word onClick function\n  wordChosen = (item) => {\n\n    let firstLineCopy = [...this.state.firstLine];\n    let secondLineCopy = [...this.state.secondLine];\n    let thirdLineCopy = [...this.state.thirdLine];\n\n    let lineArrayCopy = [...this.state.currentLine];\n    lineArrayCopy.push(item);\n\n    let totalSyllablesCopy = this.state.totalSyllables + item.numSyllables;\n\n    //if the current line is line one, and syllables so far is five, then move to line two and update the current line to two\n    if (totalSyllablesCopy === 5) {\n      //when we've reached our cap, push the array to first line, reset current line to an empty array\n      firstLineCopy = [...lineArrayCopy];\n      lineArrayCopy = [];\n    } else if (totalSyllablesCopy === 12) {\n      secondLineCopy = [...lineArrayCopy];\n      lineArrayCopy = [];\n    } else if (totalSyllablesCopy === 17) {\n      thirdLineCopy = [...lineArrayCopy];\n      lineArrayCopy = [];\n    }\n\n    this.setState({\n      currentLine: lineArrayCopy,\n      firstLine: firstLineCopy,\n      secondLine: secondLineCopy,\n      thirdLine: thirdLineCopy,\n      totalSyllables: totalSyllablesCopy,\n    }, () => {\n      if (this.state.totalSyllables < 17) {\n        this.getRelatedWords(item.word)\n      }\n    })\n  }\n\n  // This is the event handler for the Journal button on our home screen\n  createHaiku = () => {\n    // (1) Make header disappear\n    // (2) Make form appear\n\n    this.setState({\n      formVisible: true,\n      headerVisible: false\n    }, () => {console.log('hello')})\n  }\n\n  // This button will get user more words related to their word of choice\n  moreWords = () => {\n    this.setState({\n      tenRelatedWords: this.randomizeWords(this.state.allRelatedWords)\n    })\n  }\n\n  render() {\n    return (\n\n      <div className=\"App\">\n\n        <div className=\"rightHalf\">\n          {\n            this.state.headerVisible ?\n            <Header\n              createHaiku = {this.createHaiku}\n            />\n            : null\n          }\n\n        {\n            this.state.formVisible ?\n              <Form\n                handleFormSubmit={this.handleFormSubmit}\n                handleUserInput={this.handleUserInput}\n                inputTextValue={this.state.inputTextValue}\n              />\n            : null\n        }\n      \n        {\n            this.state.formVisible && this.state.suggestions.length > 0 ?\n              <div className=\"autoCompleteSuggestions\">\n                <ul>\n                  {\n                    this.state.suggestions.map((suggestion, index)=> {\n                      return (\n                        <li key={suggestion + index}>\n                          <button onClick={ ()=> this.chooseSuggestedWord(suggestion.word) }>{suggestion.word}</button>\n                        </li>\n                      );\n                    })\n                  }\n                </ul>\n\n            </div>\n          : null\n        }\n\n        <RelatedWords\n          tenRelatedWords={this.state.tenRelatedWords}\n          totalSyllables={this.state.totalSyllables}\n          wordChosen={this.wordChosen}\n          moreWords={this.moreWords}\n        />\n      </div>\n\n      <Haiku\n        firstLine={this.state.firstLine}\n        secondLine={this.state.secondLine}\n        thirdLine={this.state.thirdLine}\n        currentLine={this.state.currentLine}\n      />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","export default function getRandomIntInRange(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function getRandomIntInRangeExclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport function getRandomFloatInRange(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nexport function probability(n) {\n    return n > 0 && Math.random() <= n;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}