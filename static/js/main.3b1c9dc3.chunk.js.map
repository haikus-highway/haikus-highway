{"version":3,"sources":["removeFromArray.js","Components/Header.js","Components/Form.js","Components/Haiku.js","Components/RelatedWords.js","App.js","randomizers.js","serviceWorker.js","index.js"],"names":["removeFromArray","item","array","i","length","splice","Header","className","onClick","this","props","createHaiku","Component","Form","onSubmit","handleFormSubmit","action","htmlFor","placeholder","onChange","handleUserInput","type","id","name","pattern","autoComplete","value","inputTextValue","Haiku","firstLine","map","index","key","word","secondLine","thirdLine","currentLine","RelatedWords","tenRelatedWords","totalSyllables","wordChosen","moreWords","App","e","preventDefault","axios","url","method","responseType","params","reqUrl","state","userInput","then","response","totalSyllablesSoFar","getSyllablesPerLine","maxSyllablesAllowed","checkMaxSyllablesAllowed","data","toLowerCase","numSyllables","firstLineCopy","secondLineCopy","thirdLineCopy","currentLineCopy","push","setState","formVisible","getRelatedWords","alert","catch","error","filterResults","syllablesSoFar","randomizeWords","relatedWords","min","max","relatedWordsCopy","randomWords","randomIndex","Math","ceil","floor","random","undefined","results","regex","filteredResults","filter","match","allRelatedWords","line","numberOfSyllablesLine","forEach","target","autoCompleteSuggestions","suggestions","input","chooseSuggestedWord","lineArrayCopy","totalSyllablesCopy","headerVisible","console","log","suggestion","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3b1c9dc3.chunk.js","sourcesContent":["export default function removeFromArray(item, array) {\r\n    for (let i = 0; i < array.length; i++) {\r\n        if (array[i] === item) {\r\n            array.splice(i, 1);\r\n        }\r\n    }\r\n};\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass Header extends Component{\r\n    render(){\r\n        return(\r\n            <header>\r\n                <div className=\"wrapper\">\r\n                    <h1>HaikYou</h1>\r\n                    <p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Quo ex ut doloremque iste excepturi sit officiis odit quisquam quasi suscipit neque soluta, esse commodi nesciunt, ipsa nemo labore illum veniam.</p>\r\n\r\n                    <div className=\"homeButtonDiv\">\r\n                        <button className=\"homeButton\" onClick={this.props.createHaiku}>\r\n                            Journal\r\n                  </button>\r\n\r\n                        <button className=\"homeButton\">\r\n                            Haiku Log\r\n                  </button>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.props.handleFormSubmit} action=\"submit\" className=\"form wrapper\">\r\n                <label className=\"visuallyHidden\" htmlFor=\"userInput\">Type a word:</label>\r\n                <input placeholder=\"Type a word here\" onChange={this.props.handleUserInput} type=\"text\" id=\"userInput\" name=\"userInput\" pattern=\"^[a-zA-Z]*$\" autoComplete=\"off\" value={this.props.inputTextValue} />\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\n\r\nclass Haiku extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"printedHaiku wrapper\">\r\n\r\n                {\r\n                    this.props.firstLine.length > 0 ?\r\n                        <p className=\"line firstLine\">\r\n                            {\r\n                                this.props.firstLine.map((item, index) => {\r\n                                    return <span key={item.word + index}>{item.word} </span>\r\n                                })\r\n                            }\r\n                        </p>\r\n                        : null\r\n                }\r\n\r\n                {\r\n\r\n                    this.props.secondLine.length > 0 ?\r\n                        <p className=\"line secondLine\">\r\n                            {\r\n                                this.props.secondLine.map((item, index) => {\r\n                                    return <span key={item.word + index}>{item.word} </span>\r\n                                })\r\n                            }\r\n                        </p>\r\n                        : null\r\n                }\r\n\r\n                {\r\n                    this.props.thirdLine.length > 0 ?\r\n                        <p className=\"line thirdLine\">\r\n                            {\r\n                                this.props.thirdLine.map((item, index) => {\r\n                                    return <span key={item.word + index}>{item.word} </span>\r\n                                })\r\n                            }\r\n                        </p>\r\n                        : null\r\n                }\r\n\r\n                {\r\n                    this.props.currentLine.length > 0 ?\r\n                        <p className=\"line currentLine underline\">\r\n                            {\r\n                                this.props.currentLine.map((item, index) => {\r\n                                    return <span key={item.word + index}>{item.word} </span>\r\n                                })\r\n                            }\r\n                        </p>\r\n                        : null\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Haiku;","import React, { Component } from 'react';\r\n\r\nclass RelatedWords extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <ul className=\"relatedWords\">\r\n                    {\r\n                        this.props.tenRelatedWords.length > 0 && this.props.totalSyllables < 17 ?\r\n                            this.props.tenRelatedWords.map((item, index) => {\r\n                                return (\r\n                                    <div key={item.word + index}>\r\n                                        <li>\r\n                                            <button className=\"chosenWord\" onClick={() => this.props.wordChosen(item)}>{item.word}</button>\r\n                                        </li>\r\n                                    </div>\r\n                                )\r\n                            }) :\r\n                            null\r\n                    }\r\n\r\n                </ul>\r\n\r\n                {\r\n                    this.props.tenRelatedWords.length > 0 && this.props.totalSyllables < 17 ?\r\n                        <div className=\"moreWordsButton\">\r\n                            <button onClick={this.props.moreWords}>More words</button>\r\n                        </div>\r\n                        : null\r\n                }\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default RelatedWords;\r\n\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport { getRandomIntInRangeExclusive } from './randomizers';\r\nimport removeFromArray from './removeFromArray';\r\nimport Header from './Components/Header';\r\nimport Form from './Components/Form';\r\nimport Haiku from './Components/Haiku';\r\nimport RelatedWords from './Components/RelatedWords';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    // 1\r\n    this.state = {\r\n      userInput: '', //2,\r\n      firstLine: [], //3\r\n      secondLine: [],\r\n      thirdLine: [],\r\n      allRelatedWords: [],\r\n      tenRelatedWords: [],\r\n      currentLine: [],\r\n      totalSyllables: 0,\r\n      formVisible: false,\r\n      headerVisible: true,\r\n      suggestions: [],\r\n      inputTextValue: ''\r\n    };\r\n  }\r\n\r\n  handleFormSubmit = (e) => { //4\r\n    e.preventDefault();\r\n\r\n    axios({ //5\r\n      // url: `https://api.datamuse.com/words?sp=${this.state.userInput}&md=s`,\r\n      url: 'https://proxy.hackeryou.com',\r\n      method: 'GET',\r\n      responseType: 'json',\r\n      params: {\r\n        reqUrl: `https://api.datamuse.com/words?sp=${this.state.userInput}&md=s`,\r\n      }\r\n    }).then((response) => {\r\n      // Recall: response = data received from AXIOS call\r\n      const totalSyllablesSoFar = this.getSyllablesPerLine(this.state.currentLine);\r\n      const maxSyllablesAllowed = this.checkMaxSyllablesAllowed(totalSyllablesSoFar);\r\n\r\n      if (response.data[0].word === this.state.userInput.toLowerCase() && response.data[0].numSyllables <= maxSyllablesAllowed) {\r\n\r\n        let firstLineCopy = [...this.state.firstLine];\r\n        let secondLineCopy = [...this.state.secondLine];\r\n        let thirdLineCopy = [...this.state.thirdLine];\r\n        let currentLineCopy = [...this.state.currentLine]; //6\r\n\r\n        if (response.data[0].numSyllables === maxSyllablesAllowed) {\r\n          if (this.state.totalSyllables <= 5) {\r\n            currentLineCopy.push(response.data[0]);\r\n            firstLineCopy = [...currentLineCopy];\r\n            currentLineCopy = [];\r\n          } else if (this.state.totalSyllables <= 12) {\r\n            currentLineCopy.push(response.data[0]);\r\n            secondLineCopy = [...currentLineCopy];\r\n            currentLineCopy = [];\r\n          } else {\r\n            currentLineCopy.push(response.data[0]);\r\n            thirdLineCopy = [...currentLineCopy];\r\n            currentLineCopy = [];\r\n          }\r\n        } else {\r\n          currentLineCopy.push(\r\n            // Recall: .push() adds items into our currentLineCopy array\r\n            {//7\r\n              word: this.state.userInput,\r\n              numSyllables: response.data[0].numSyllables\r\n            }\r\n          );\r\n        }\r\n  \r\n  \r\n        this.setState({ //8\r\n          firstLine: firstLineCopy,\r\n          secondLine: secondLineCopy,\r\n          thirdLine: thirdLineCopy,\r\n          currentLine: currentLineCopy,\r\n          totalSyllables: this.state.totalSyllables + response.data[0].numSyllables,\r\n          formVisible: false,\r\n        },\r\n          //9\r\n          () => {\r\n            this.getRelatedWords(this.state.userInput);\r\n          }\r\n        );\r\n      } else {\r\n        alert('Either you misspelled or entered too many syllables');\r\n        this.setState({\r\n          userInput: ''\r\n        });\r\n      }\r\n    }).catch((error) => {\r\n      alert(\"This word doesn't exist\");\r\n      this.setState({\r\n        userInput: ''\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  //10\r\n  getRelatedWords = (word) => {\r\n    axios({\r\n      // url: `https://api.datamuse.com/words?rel_bga=${word}&md=s`,\r\n      url: 'https://proxy.hackeryou.com',\r\n      method: 'GET',\r\n      responseType: 'json',\r\n      params: {\r\n        reqUrl: `https://api.datamuse.com/words?rel_bga=${word}&md=s`,\r\n      }\r\n    }).then((response) => {\r\n      //11\r\n\r\n      //12\r\n      if (response.data.length === 0) {\r\n        this.setState({\r\n          formVisible: true,\r\n          userInput: '',\r\n          tenRelatedWords: []\r\n        });\r\n\r\n        alert(\"Couldn't find any related words - please enter another!\")\r\n      } else {\r\n        this.filterResults(response.data);\r\n      }\r\n    });\r\n  }\r\n\r\n  checkMaxSyllablesAllowed = (syllablesSoFar) => {\r\n    let maxSyllablesAllowed;\r\n\r\n    if (this.state.totalSyllables < 5 || this.state.totalSyllables >= 12) {\r\n      maxSyllablesAllowed = 5 - syllablesSoFar;\r\n    } else {\r\n      maxSyllablesAllowed = 7 - syllablesSoFar;\r\n    }\r\n    return maxSyllablesAllowed;\r\n  }\r\n\r\n  randomizeWords = (relatedWords) => {\r\n    const relatedWordsCopy = [...relatedWords];\r\n\r\n    const randomWords = [];\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n      // Find random index\r\n      const randomIndex = getRandomIntInRangeExclusive(0, relatedWordsCopy.length);\r\n\r\n      // Push random index of relatedWordsCopy array into randomWords array\r\n      if (relatedWordsCopy[randomIndex] !== undefined) {\r\n        randomWords.push(relatedWordsCopy[randomIndex]);\r\n      }\r\n\r\n      // Remove random index from relatedWordsCopy array to prevent duplicates in randomWords array\r\n      removeFromArray(relatedWordsCopy[randomIndex], relatedWordsCopy);\r\n\r\n    }\r\n\r\n    return randomWords\r\n  }\r\n\r\n  filterResults = (results) => {\r\n    //13\r\n\r\n    const totalSyllablesSoFar = this.getSyllablesPerLine(this.state.currentLine);\r\n\r\n    //14\r\n    const maxSyllablesAllowed = this.checkMaxSyllablesAllowed(totalSyllablesSoFar);\r\n\r\n    //15\r\n\r\n    const regex = /[a-z]/g;\r\n\r\n    //16\r\n    const filteredResults = results.filter((item) => {\r\n      if (item.numSyllables <= maxSyllablesAllowed && item.word.match(regex)) {\r\n        //17\r\n        return item;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n\r\n    // console.log(filteredResults)\r\n\r\n    let randomWords;\r\n    let formVisible = false;\r\n\r\n    if (filteredResults.length > 0) {\r\n      randomWords = this.randomizeWords(filteredResults);\r\n    } else {\r\n      randomWords = [];\r\n      formVisible = true;\r\n    }\r\n\r\n    this.setState({\r\n      allRelatedWords: filteredResults,\r\n      tenRelatedWords: randomWords,\r\n      userInput: '',\r\n      inputTextValue: '',\r\n      formVisible: formVisible\r\n    })\r\n  }\r\n\r\n  // Provide a line to check and get the total number of syllables within that line\r\n  getSyllablesPerLine = (line) => {\r\n    // Line will be an array that is received from state\r\n\r\n    // initialize a sum variable to 0\r\n    let numberOfSyllablesLine = 0;\r\n    // Loop through each item in the line array provided\r\n    line.forEach((item) => {\r\n      // Add the number of syllables in this word to the sum variable\r\n      numberOfSyllablesLine += item.numSyllables;\r\n    });\r\n    // Return the total sum of syllables\r\n    return numberOfSyllablesLine;\r\n  }\r\n\r\n  handleUserInput = (e) => {\r\n    this.setState({\r\n      userInput: e.target.value,\r\n      inputTextValue: e.target.value\r\n    });\r\n\r\n    if (e.target.value !== '') {\r\n      this.autoCompleteSuggestions(e.target.value);\r\n    } else {\r\n      this.setState({\r\n        suggestions: []\r\n      });\r\n    }\r\n  }\r\n\r\n  autoCompleteSuggestions = (input) => {\r\n    axios({\r\n      // url: `https://api.datamuse.com/sug?s=${input}`,\r\n      url: 'https://proxy.hackeryou.com',\r\n      method: 'GET',\r\n      responseType: 'json',\r\n      params:{\r\n        reqUrl: `https://api.datamuse.com/sug?s=${input}`,\r\n      }\r\n    }).then((response)=> {\r\n      this.setState({\r\n        suggestions: response.data\r\n      });\r\n    })\r\n  }\r\n\r\n  chooseSuggestedWord = (word) => {\r\n    this.setState({\r\n      userInput: word,\r\n      inputTextValue: word,\r\n      suggestions: []\r\n    });\r\n  }\r\n\r\n  // Word onClick function\r\n  wordChosen = (item) => {\r\n\r\n    let firstLineCopy = [...this.state.firstLine];\r\n    let secondLineCopy = [...this.state.secondLine];\r\n    let thirdLineCopy = [...this.state.thirdLine];\r\n\r\n    let lineArrayCopy = [...this.state.currentLine];\r\n    lineArrayCopy.push(item);\r\n\r\n    let totalSyllablesCopy = this.state.totalSyllables + item.numSyllables;\r\n\r\n    //if the current line is line one, and syllables so far is five, then move to line two and update the current line to two\r\n    if (totalSyllablesCopy === 5) {\r\n      //when we've reached our cap, push the array to first line, reset current line to an empty array\r\n      firstLineCopy = [...lineArrayCopy];\r\n      lineArrayCopy = [];\r\n    } else if (totalSyllablesCopy === 12) {\r\n      secondLineCopy = [...lineArrayCopy];\r\n      lineArrayCopy = [];\r\n    } else if (totalSyllablesCopy === 17) {\r\n      thirdLineCopy = [...lineArrayCopy];\r\n      lineArrayCopy = [];\r\n    }\r\n\r\n    this.setState({\r\n      currentLine: lineArrayCopy,\r\n      firstLine: firstLineCopy,\r\n      secondLine: secondLineCopy,\r\n      thirdLine: thirdLineCopy,\r\n      totalSyllables: totalSyllablesCopy,\r\n    }, () => {\r\n      if (this.state.totalSyllables < 17) {\r\n        this.getRelatedWords(item.word)\r\n      }\r\n    })\r\n  }\r\n\r\n  // This is the event handler for the Journal button on our home screen\r\n  createHaiku = () => {\r\n    // (1) Make header disappear\r\n    // (2) Make form appear\r\n\r\n    this.setState({\r\n      formVisible: true,\r\n      headerVisible: false\r\n    }, () => {console.log('hello')})\r\n  }\r\n\r\n  // This button will get user more words related to their word of choice\r\n  moreWords = () => {\r\n    this.setState({\r\n      tenRelatedWords: this.randomizeWords(this.state.allRelatedWords)\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <div className=\"App\">\r\n\r\n        <div className=\"rightHalf\">\r\n          {\r\n            this.state.headerVisible ?\r\n            <Header\r\n              createHaiku = {this.createHaiku}\r\n            />\r\n            : null\r\n          }\r\n\r\n        {\r\n            this.state.formVisible ?\r\n              <Form\r\n                handleFormSubmit={this.handleFormSubmit}\r\n                handleUserInput={this.handleUserInput}\r\n                inputTextValue={this.state.inputTextValue}\r\n              />\r\n            : null\r\n        }\r\n      \r\n        {\r\n            this.state.formVisible && this.state.suggestions.length > 0 ?\r\n              <div className=\"autoCompleteSuggestions\">\r\n                <ul>\r\n                  {\r\n                    this.state.suggestions.map((suggestion, index)=> {\r\n                      return (\r\n                        <li key={suggestion + index}>\r\n                          <button onClick={ ()=> this.chooseSuggestedWord(suggestion.word) }>{suggestion.word}</button>\r\n                        </li>\r\n                      );\r\n                    })\r\n                  }\r\n                </ul>\r\n\r\n            </div>\r\n          : null\r\n        }\r\n\r\n        <RelatedWords\r\n          tenRelatedWords={this.state.tenRelatedWords}\r\n          totalSyllables={this.state.totalSyllables}\r\n          wordChosen={this.wordChosen}\r\n          moreWords={this.moreWords}\r\n        />\r\n      </div>\r\n\r\n      <Haiku\r\n        firstLine={this.state.firstLine}\r\n        secondLine={this.state.secondLine}\r\n        thirdLine={this.state.thirdLine}\r\n        currentLine={this.state.currentLine}\r\n      />\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","export default function getRandomIntInRange(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function getRandomIntInRangeExclusive(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\nexport function getRandomFloatInRange(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\nexport function probability(n) {\r\n    return n > 0 && Math.random() <= n;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}